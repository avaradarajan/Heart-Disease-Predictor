# Stubs for pyspark.serializers (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

xrange = range

class SpecialLengths:
    END_OF_DATA_SECTION: int = ...
    PYTHON_EXCEPTION_THROWN: int = ...
    TIMING_DATA: int = ...
    END_OF_STREAM: int = ...
    NULL: int = ...
    START_ARROW_STREAM: int = ...

class Serializer:
    def dump_stream(self, iterator: Any, stream: Any) -> None: ...
    def load_stream(self, stream: Any) -> None: ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __hash__(self): ...

class FramedSerializer(Serializer):
    def __init__(self) -> None: ...
    def dump_stream(self, iterator: Any, stream: Any) -> None: ...
    def load_stream(self, stream: Any): ...
    def dumps(self, obj: Any) -> None: ...
    def loads(self, obj: Any) -> None: ...

class ArrowSerializer(FramedSerializer):
    def dumps(self, batch: Any): ...
    def loads(self, obj: Any): ...

class ArrowStreamPandasSerializer(Serializer):
    def __init__(self, timezone: Any) -> None: ...
    def dump_stream(self, iterator: Any, stream: Any) -> None: ...
    def load_stream(self, stream: Any) -> None: ...

class BatchedSerializer(Serializer):
    UNLIMITED_BATCH_SIZE: int = ...
    UNKNOWN_BATCH_SIZE: int = ...
    serializer: Any = ...
    batchSize: Any = ...
    def __init__(self, serializer: Any, batchSize: Any = ...) -> None: ...
    def dump_stream(self, iterator: Any, stream: Any) -> None: ...
    def load_stream(self, stream: Any): ...

class FlattenedValuesSerializer(BatchedSerializer):
    def __init__(self, serializer: Any, batchSize: int = ...) -> None: ...
    def load_stream(self, stream: Any): ...

class AutoBatchedSerializer(BatchedSerializer):
    bestSize: Any = ...
    def __init__(self, serializer: Any, bestSize: Any = ...) -> None: ...
    def dump_stream(self, iterator: Any, stream: Any) -> None: ...

class CartesianDeserializer(Serializer):
    key_ser: Any = ...
    val_ser: Any = ...
    def __init__(self, key_ser: Any, val_ser: Any) -> None: ...
    def load_stream(self, stream: Any): ...

class PairDeserializer(Serializer):
    key_ser: Any = ...
    val_ser: Any = ...
    def __init__(self, key_ser: Any, val_ser: Any) -> None: ...
    def load_stream(self, stream: Any): ...

class NoOpSerializer(FramedSerializer):
    def loads(self, obj: Any): ...
    def dumps(self, obj: Any): ...

class PickleSerializer(FramedSerializer):
    def dumps(self, obj: Any): ...
    def loads(self, obj: Any, encoding: str = ...): ...

class CloudPickleSerializer(PickleSerializer):
    def dumps(self, obj: Any): ...

class MarshalSerializer(FramedSerializer):
    def dumps(self, obj: Any): ...
    def loads(self, obj: Any): ...

class AutoSerializer(FramedSerializer):
    def __init__(self) -> None: ...
    def dumps(self, obj: Any): ...
    def loads(self, obj: Any): ...

class CompressedSerializer(FramedSerializer):
    serializer: Any = ...
    def __init__(self, serializer: Any) -> None: ...
    def dumps(self, obj: Any): ...
    def loads(self, obj: Any): ...

class UTF8Deserializer(Serializer):
    use_unicode: Any = ...
    def __init__(self, use_unicode: bool = ...) -> None: ...
    def loads(self, stream: Any): ...
    def load_stream(self, stream: Any): ...

class ChunkedStream:
    buffer_size: Any = ...
    buffer: Any = ...
    current_pos: int = ...
    wrapped: Any = ...
    def __init__(self, wrapped: Any, buffer_size: Any) -> None: ...
    def write(self, bytes: Any) -> None: ...
    def close(self) -> None: ...
